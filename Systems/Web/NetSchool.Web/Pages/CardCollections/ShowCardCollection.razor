@page "/show-collection"
@using NetSchool.Web.Components.NavigationArrows
@using NetSchool.Web.Entities.CardCollections
@using NetSchool.Web.Extensions
@using NetSchool.Web.Services.CardCollections
@using NetSchool.Web.Pages.Account.Services;
@using Blazored.LocalStorage;
@using NetSchool.Web.Components;
@using System.IO
@inject ICardCollectionsService CardCollectionService
@inject ISnackbar Snackbar
@inject IAccountService AccountService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@layout MainLayout

<BackArrow />

<MudPaper Elevation="25">
    <MudToolBar>
        <MudText Class="display: flex; justify-content: center; align-items: center;">@_collection.Name</MudText>
            <MudSpacer />
            <MudMenu Icon="@Icons.Material.Filled.Settings" Color="Color.Primary">
                <div class="menu-item">
                    <MudSwitch @bind-Value="@Settings.Arrows" CheckedChanged="(bool _)=>SaveViewSettings(_)" Color="Color.Primary">Show Arrows</MudSwitch>
                    <MudSwitch @bind-Value="@Settings.Bullets" CheckedChanged="(bool _)=>SaveViewSettings(_)" Color="Color.Primary">Show Bullets</MudSwitch>
                    <MudSwitch @bind-Value="@Settings.SwipeGesture" CheckedChanged="(bool _)=>SaveViewSettings(_)" Color="Color.Primary">Enable Swap Gesture</MudSwitch>
                    <MudSwitch @bind-Value="@Settings.Autocycle" CheckedChanged="(bool _)=>SaveViewSettings(_)" Color="Color.Primary">Auto Cycle</MudSwitch>
                    <MudButton OnClick="ShuffleCards">Shuffle Cards</MudButton>
                </div>
            </MudMenu>
            @if (_isOwnerOpenThisPage)
        {
            <MudIconButton Title="Edit Card Collection" Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="EditCollection" />
            <MudIconButton Title="Delete Card Collection" Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="DeleteCollection" />
        }
        <MudIconButton Icon="@Icons.Material.Filled.PictureAsPdf" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="GenerateAndDownloadPdf" Title="Download as Pdf" />
    </MudToolBar>
</MudPaper>

<div style="display: flex; justify-content: center; align-items: center;">
    <MudCarousel @ref="_carousel" ItemsSource="@_collection.Cards" SelectedIndex="@selectedIndex" SelectedIndexChanged="@(i => selectedIndex = i)" Style="width: 60vw; height:60vh;" ShowArrows="Settings.Arrows" ShowBullets="Settings.Bullets" EnableSwipeGesture="Settings.SwipeGesture" AutoCycle="Settings.Autocycle">
        <ItemTemplate>
            <div class="d-flex flex-column justify-center" style="height:100%; padding-left:25%; padding-right:25%">
                <CardViewComponent Front="@context.Front"
                                   Reverse="@context.Reverse"
                                   IsFrontVisible="@context.IsFrontVisible"
                                   IsFrontVisibleChanged="@(v => context.IsFrontVisible = v)"
                                   OnReveal="() => context.IsAnswerRevealed = true" />
                @if (context.IsAnswerRevealed)
                {
                    <div class="mt-4 d-flex justify-center flex-column align-center">
                        <MudText Typo="Typo.h6">Насколько хорошо вы знали ответ?</MudText>
                        <div class="d-flex justify-center flex-wrap gap-2 mt-2">
                            @for (int i = 1; i <= 5; i++)
                            {
                                int a = i;
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => RateCard(context, a)">@a</MudButton>
                            }
                        </div>
                    </div>
                }
            </div>
        </ItemTemplate>
    </MudCarousel>
</div>

<br />

@code {
    private const string CollectionViewSettingsKey = "CollectionViewSettings";
    private MudCarousel<CardModel> _carousel;
    private int _selectedIndex = 0;
    private int selectedIndex
    {
        get => _selectedIndex;
        set
        {
            _selectedIndex = value;
            if (value >= 0 && value < _collection.Cards.Count)
            {
                foreach (var card in _collection.Cards)
                {
                    card.IsAnswerRevealed = false;
                    card.IsFrontVisible = true;
                }
            }
        }
    }

    private bool _isOwnerOpenThisPage = false;
    [SupplyParameterFromQuery] private string collectionId { get; set; }
    private CardCollectionModel _collection { get; set; } = new();
    [Parameter] public ViewSettings Settings { get; set; } = new();

    public class ViewSettings
    {
        public bool Arrows { get; set; }
        public bool Bullets { get; set; }
        public bool SwipeGesture { get; set; }
        public bool Autocycle { get; set; }

        public ViewSettings()
        {
            Arrows = true;
            Bullets = true;
            SwipeGesture = true;
            Autocycle = false;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(collectionId))
            return;

        try
        {
            _collection = await CardCollectionService.Get(new Guid(collectionId));
            foreach (var card in _collection.Cards)
            {
                card.IsAnswerRevealed = false;
                if (card.Easiness <= 0) card.Easiness = 2.5;
            }
            _collection.Cards = _collection.Cards.OrderBy(_ => Guid.NewGuid()).ToList();
            var userId = await AccountService.GetUserIdAsync();
            _isOwnerOpenThisPage = userId == _collection.UserId.ToString();
            await LoadViewSettings();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            NavManager.NavigateTo("/");
        }
    }

    private void ShuffleCards()
    {
        if (_collection?.Cards == null) return;
        foreach (var card in _collection.Cards)
        {
            card.IsAnswerRevealed = false;
        }
        _collection.Cards = _collection.Cards.OrderBy(_ => Guid.NewGuid()).ToList();
        selectedIndex = 0;
    }

    private void EditCollection()
    {
        NavManager.NavigateTo($"/update-collection?collectionId={collectionId}");
    }

    private async Task DeleteCollection()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete this collection? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Delete collection", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        try
        {
            await CardCollectionService.Delete(_collection.Id);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        NavManager.NavigateTo("/collections");
    }

    private async Task SaveViewSettings(bool value)
    {
        await LocalStorage.SetItemAsync(CollectionViewSettingsKey, Settings);
    }

    private async Task LoadViewSettings()
    {
        Settings = await LocalStorage.GetItemAsync<ViewSettings>(CollectionViewSettingsKey) ?? new ViewSettings();
    }

    private async Task GenerateAndDownloadPdf()
    {
        var binaryPdf = await CardCollectionService.CardCollectionToPdfAsync(_collection.Id);

        await JSRuntime.InvokeVoidAsync("saveAsFile", $"Memorizing {_collection.Name} collection.pdf", Convert.ToBase64String(binaryPdf));
    }

    private void RateCard(CardModel card, int grade)
    {
        if (grade >= 3)
        {
            card.Repetition++;

            if (card.Repetition == 1)
                card.Interval = 1;
            else if (card.Repetition == 2)
                card.Interval = 6;
            else
                card.Interval = (int)Math.Round(card.Interval * card.Easiness);
        }
        else
        {
            card.Repetition = 0;
            card.Interval = 1;
        }

        card.Easiness += 0.1 - (5 - grade) * (0.08 + (5 - grade) * 0.02);
        if (card.Easiness < 1.3)
            card.Easiness = 1.3;

        card.NextReviewDate = DateTime.Today.AddDays(card.Interval);

        foreach (var c in _collection.Cards)
            c.IsAnswerRevealed = false;

        Snackbar.Add($"Card rated {grade}. Next review in {card.Interval} day(s).", Severity.Success);

        _collection.Cards = _collection.Cards
            .OrderByDescending(c => c.NextReviewDate <= DateTime.Today ? 1 : 0)
            .ThenBy(c => c.NextReviewDate)
            .ThenBy(_ => Guid.NewGuid())
            .ToList();

        selectedIndex = 0;
    }

}

<script type="text/javascript">
    function saveAsFile(filename, bytesBase64) {
        if (navigator.msSaveBlob) {
            var data = window.atob(bytesBase64);
            var bytes = new Uint8Array(data.length);
            for (var i = 0; i < data.length; i++) {
                bytes[i] = data.charCodeAt(i);
            }
            var blob = new Blob([bytes.buffer], { type: "application/octet-stream" });
            navigator.msSaveBlob(blob, filename);
            window.navigator.msSaveOrOpenBlob(blob);
        }
        else {
            var link = document.createElement('a');
            link.download = filename;
            link.href = "data:application/octet-stream;base64," + bytesBase64;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    }
</script>

<style>
    .menu-item {
        padding-left: 1vh
    }
</style>
