@page "/create-collection"
@page "/update-collection"
@using Microsoft.AspNetCore.Components.Authorization
@using NetSchool.Web.Components
@using Microsoft.AspNetCore.Authorization
@using NetSchool.Web.Entities.CardCollections
@using NetSchool.Web.Entities.CardCollections.Enums
@using NetSchool.Web.Services.CardCollections
@using NetSchool.Web.Services.CardCollectionActions
@using System.Security.Claims
@using NetSchool.Web.Components.NavigationArrows
@using System.Text.Json
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ICardCollectionsService cardService
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavManager
@inject AuthenticationStateProvider authProvider

@attribute [Authorize]
@layout MainLayout

<BackArrow />

<PageTitle>Create card collection</PageTitle>

<MudContainer>
    <MudGrid>
        <MudItem xs="12">
            <MudPaper>
                <MudForm Model="cardActions.collection" @ref="form">

                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Info"
                               OnClick="ToggleAiBlock">
                        @(showAiBlock ? "Hide AI Generator" : "Show AI Generator")
                    </MudButton>

                    @if (showAiBlock)
                    {
                        <MudTextField Label="Generate cards prompt"
                                      @bind-Value="promptText"
                                      Placeholder="Enter your topic or terms..."
                                      Variant="Variant.Outlined"
                                      FullWidth="true" />

                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Success"
                                   OnClick="async ()=> await GenerateCardsWithAI(promptText)">
                            Generate with AI
                        </MudButton>
                    }

                    <MudTextField Label="Collection name" @bind-Value="cardActions.collection.Name"
                                  For="@(() => cardActions.collection.Name)"
                                  Required="true"
                                  RequiredError="Collection name is required!"
                                  MaxLength="100">
                    </MudTextField>
                    @foreach (var (component, index) in cardActions.collection.Cards.Select((c, i) => (c, i)))
                    {
                        <MudCard>
                            <MudCardContent>
                                <MudGrid>
                                    <MudItem xs="1">
                                        <MudText>@(index + 1)</MudText>
                                    </MudItem>
                                    <MudItem xs="10">
                                        <MudTextField Disabled="true"
                                                      AutoGrow="true"
                                                      Value="@component.Front"
                                                      Label="Term"
                                                      Variant="Variant.Filled"
                                                      Style="width: 100%;" />
                                        <MudTextField Disabled="true"
                                                      AutoGrow="true"
                                                      Value="@component.Reverse"
                                                      Label="Definition"
                                                      Variant="Variant.Filled"
                                                      Style="width: 100%;" />
                                    </MudItem>
                                    <MudItem xs="1">
                                        <MudIconButton Title="Edit Card Collection"
                                                       Icon="@Icons.Material.Filled.Edit"
                                                       Variant="Variant.Outlined"
                                                       Color="Color.Primary"
                                                       Size="Size.Small"
                                                       OnClick="() => EditCard(component)" />
                                        <MudIconButton Title="Delete Card Collection"
                                                       Icon="@Icons.Material.Filled.Delete"
                                                       Variant="Variant.Outlined"
                                                       Color="Color.Primary"
                                                       Size="Size.Small"
                                                       OnClick="() => DeleteCard(component.Id)" />
                                    </MudItem>
                                </MudGrid>
                            </MudCardContent>
                        </MudCard>
                        @if (index != cardActions.collection.Cards.Count - 1)
                        {
                            <div style="height: 20px;"></div>
                        }
                    }
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="AddCard">Add card</MudButton>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Secondary"
                               OnClick="SaveCollection"
                               Disabled="@(!cardActions.collection.Cards.Any())">Save</MudButton>

                </MudForm>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>


@code {
    const string CreatePath = "create-collection";
    private NetSchool.Web.Services.CardCollectionActions.CardCollectionActionsBase cardActions;
    private string searchString = string.Empty;
    private MudForm form = default!;
    private string promptText = string.Empty;
    [SupplyParameterFromQuery] public Guid collectionId { get; set; }
    private bool showAiBlock = false;


    protected override async Task OnInitializedAsync()
    {
        if (CreatePath == NavManager.ToBaseRelativePath(NavManager.Uri))
        {
            cardActions = new CreateCardCollectionActions(authProvider, cardService);
            return;
        }
        else
        {
            cardActions = new UpdateCardCollectionActions(cardService);
        }

        try
        {
            var collectionModel = await cardService.Get(collectionId);
            if (collectionModel == null)
                return;

            cardActions.collection.Name = collectionModel.Name;
            cardActions.collection.UserId = collectionModel.UserId;
            cardActions.collection.Cards = collectionModel.Cards;
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task AddCard()
    {
        var parameters = new DialogParameters { };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = await DialogService.ShowAsync<CardDialog>("Add card", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var cardModel = ((CardDialog)dialog.Dialog).Model;
        cardModel.Id = Guid.NewGuid();

        cardActions.AddCard(cardModel);
    }

    private async Task GenerateCardsWithAI(string prompt)
    {
        try
        {
            await cardActions.GenerateWithAI(prompt);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to generate cards: {ex.Message}", Severity.Error);
        }
    }

    private async Task EditCard(CardModel model)
    {
        var parameters = new DialogParameters();
        parameters.Add("Model", new CardModel { Id = model.Id, Front = model.Front, Reverse = model.Reverse });

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<CardDialog>("Edit card", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var cardModel = ((CardDialog)dialog.Dialog).Model;

        cardActions.EditCard(cardModel);
    }

    private async Task DeleteCard(Guid cardId)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete this card? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Delete collection", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        cardActions.DeleteCard(cardId);
    }

    private async Task SaveCollection()
    {
        try
        {
            await form.Validate();
            if (!form.IsValid)
                return;

            var parameters = new DialogParameters { };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };

            var dialog = await DialogService.ShowAsync<CardCollectionSavePeriodDialog>("Save Period", parameters, options);
            var result = await dialog.Result;

            if (result.Canceled)
                return;

            var savePeriod = ((CardCollectionSavePeriodDialog)dialog.Dialog).SavePeriod;
            await cardActions.SaveChanges(collectionId, (CardCollectionSavePeriod)savePeriod);

            NavManager.NavigateTo("/collections");
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void ToggleAiBlock()
    {
        showAiBlock = !showAiBlock;
    }
}