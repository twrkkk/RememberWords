@page "/collections"
@using Microsoft.AspNetCore.Authorization
@using NetSchool.Web.Components
@using NetSchool.Web.Entities.CardCollections
@using NetSchool.Web.Pages.Account.Services
@using NetSchool.Web.Services.CardCollections
@inject ICardCollectionsService CardCollectionsService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IAccountService AccountService
@inject NavigationManager NavManager

@attribute [Authorize]
@layout MainLayout

<PageTitle>Card Collections</PageTitle>

<MudText Typo="Typo.h4" Class="ma-8">Card Collections</MudText>

<MudTable Items="@collections" Class="ma-8">
    <ColGroup>
        <col style="width:200px;" />
        <col />
        <col />
        <col style="width:200px;" />
    </ColGroup>
    <ToolBarContent>
        <MudButton Title="Create new Card Collection" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" OnClick="AddCollection">Add</MudButton>
        <MudSpacer />
        <MudTextField Immediate="true" @bind-Value="searchString" OnKeyDown="OnEnterDown" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>TimeExpiration</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="TimeExpiration">@context.TimeExpiraton</MudTd>
            <MudTd>
                <MudIconButton Title="Open Card Collection" Icon="@Icons.Material.Filled.RemoveRedEye" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="() => ShowCollection(context.Id)" />
                <MudIconButton Title="Start Test" Icon="@Icons.Material.Filled.PlayCircleOutline" Variant="Variant.Outlined" Color="Color.Success" Size="Size.Small" OnClick="() => StartTest(context.Id)" />
                <MudIconButton Title="Author Profile" Icon="@Icons.Material.Filled.Face" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="() => OpenUserProfile(context.UserId)" />
                @if (userId == context.UserId) // creator open this collection
            {
                <MudIconButton Title="Edit Card Collection" Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="() => EditCollection(context.Id)" />
                <MudIconButton Title="Delete Card Collection" Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="() => DeleteCollection(context.Id)" />
            }
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<CardCollectionModel> collections = new List<CardCollectionModel>();
    private string searchString = string.Empty;
    private Guid userId;

    private async Task ReloadData()
    {
        try
        {
            if (string.IsNullOrEmpty(searchString))
                collections = await CardCollectionsService.GetAll();
            else
                collections = await CardCollectionsService.GetAllWithName(searchString);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ReloadData();
        userId = new Guid(await AccountService.GetUserIdAsync());
    }

    private void AddCollection()
    {
        NavManager.NavigateTo($"/create-collection");
    }

    private void EditCollection(Guid collectionId)
    {
        NavManager.NavigateTo($"/update-collection?collectionId={collectionId}");
    }

    private void OpenUserProfile(Guid userId)
    {
        NavManager.NavigateTo($"/user?userId={userId}");
    }

    private async Task DeleteCollection(Guid id)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete this collection? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Delete collection", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        try
        {
            await CardCollectionsService.Delete(id);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        await ReloadData();
    }

    private void ShowCollection(Guid id)
    {
        NavManager.NavigateTo($"/show-collection?collectionId={id}");
    }

    private async Task OnEnterDown(KeyboardEventArgs args)
    {
        if (args.Key is not "Enter" or "NumpadEnter")
            return;

        await ReloadData();
        StateHasChanged();
    }

    private void StartTest(Guid id)
    {
        NavManager.NavigateTo($"/test-collection/{id}");
    }
}